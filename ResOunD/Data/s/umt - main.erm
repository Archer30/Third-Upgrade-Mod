ZVSE2
; Unlimited Music Themes mod
; Author:   Berserker aka EtherniDee
; Engine:   ERM 2.0+
; Requires: ERA 3.3+

!#VRi^umt_randomizationIntervalDays^:S1;      // Number of days after which new track is selected for each H3 music theme
!#VRi^umt_minTrackPlaybackTime^:S40;          // Minimal time in seconds each track should be played before allowing to select another theme track
!#VRi^umt_playThemeTracksSequently^:S(TRUE);  // If 1, all theme tracks will be played sequently in a shuffled order, as opposed to random track selection
!#VRi^umt_treatCombatThemeSpecially^:S(TRUE); // If 1, combat track will be changed with every new battle.
!#VRi^umt_treatAiThemeSpecially^:S(TRUE);     // If 1, AI track will be changed with after each human player turn.

!#VRi^umt_randomizationId^:S1; // Unique randomization ID, autoincrementing from 1 to 255 with overflowing
!#VRs^umt_processGuid^:S^^;    // Current process GUID, tracked to rescan alternative themes on each game restart
!#VRs^umt_lastTheme^:S^^;      // The last theme extension-less file name.
!#VRs^umt_lastThemeAlt^:S^^;   // Extension-less file name of alternative track, used for the last theme.

!#SN:M(M_AUTO_ID)/0/(M_STR)/(M_STORED)/?i^utm_themes^; // List of theme names with generated playlists

!?FU(umt_LoadConfig);
!!FU(LoadIntGlobalsFromJson):P^umt.^/^umt_^/^randomizationIntervalDays^/^minTrackPlaybackTime^/^playThemeTracksSequently^/^shuffleThemeTracks^/
                                            ^treatCombatThemeSpecially^/^treatAiThemeSpecially^;
!!VRi^umt_randomizationIntervalDays^:F(UMT_MIN_RANDOMIZATION_INTERVAL)/(UMT_MAX_RANDOMIZATION_INTERVAL);

!#FU(umt_LoadConfig):P;

!?FU(OnStartOrLoad);
!!VR(prevProcessGuid:z):Ss^umt_processGuid^;
!!FU(GetProcessGuid):P?s^umt_processGuid^;

; Game process (re)start detection
!!if&(prevProcessGuid)<>s^umt_processGuid^:;
  !!FU(umt_ClearAllPlaylists):P;
  !!FU(umt_DeepScanDir):P^Mp3^;
  !!FU(umt_ShuffleAllPlaylists)&i^umt_playThemeTracksSequently^<>(FALSE):P;
!!en;

!?FU(OnMp3MusicChange);
; Ignore anything, when sound manager is locked to current theme
!!UN:C(SOUND_MANAGER)/(UNC_INT)/?(soundMan:y) C(soundMan)/(STRUCT_SNDMAN_UNLOCKED)/(UNC_INT)/?(soundManUnlocked:y);
!!FU&(soundManUnlocked)=(FALSE):E;

!!MP:S?(theme:z);
!!FU(StrToLower):P(theme)/?(theme);

!!if|(theme)=^combat01^/(theme)=^combat02^/(theme)=^combat03^/(theme)=^combat04^:;
  !!VR(theme):S^combat^;
!!el|(theme)=^aitheme0^/(theme)=^aitheme1^/(theme)=^aitheme2^:;
  !!VR(theme):S^aitheme^;
  !!FU(umt_ForceThemeUpdate)&i^umt_treatAiThemeSpecially^<>(FALSE):P^aitheme^;
!!en:;

!!FU(umt_GetThemeFileName):P(theme)/?(newTheme:z);

!!VRs^umt_lastTheme^:S(theme);
!!VRs^umt_lastThemeAlt^:S(newTheme);

!!MP:S(newTheme);

!?FU(OnBeforeBattlefieldVisible)&i^umt_treatCombatThemeSpecially^<>(FALSE);
!!FU(umt_ForceThemeUpdate):P^combat^;

!?FU(OnEveryDay)&i^timerOnce^=(TRUE)/i^timerDay^>1;
; Randomize theme only once per N days
!!VR(isMusicRandomizationDay:y):Sc -1 %i^umt_randomizationIntervalDays^ F0/1 X(TRUE);
!!FU&(isMusicRandomizationDay)<>(TRUE):E;

; Increase randomization ID, forcing to change theme tracks
!!VRi^umt_randomizationId^:+1 %(BIT_10) F1/(INT_MAX);

!?FU(OnEverySecond);
; ----- Perform tracking how long current theme is being played -----
; Do no account playing with 0 volume
!!UN:C(GAME_SETTING_MUSIC_VOLUME)/(UNC_INT)/?(musicVolume:y);
!!FU&(musicVolume)<=0:E;

; Check if sound manager is locked to current theme (AI mode)
!!UN:C(SOUND_MANAGER)/(UNC_INT)/?(soundMan:y) C(soundMan)/(STRUCT_SNDMAN_UNLOCKED)/(UNC_INT)/?(soundManUnlocked:y);

; If current theme is locked, reuse the last one
!!if&(soundManUnlocked)=(FALSE):;
  !!VR(theme:z):Ss^umt_lastTheme^;
!!el:; Othewise get current theme
  !!MP:C?(theme:z);
  !!VR(theme)&(theme)=s^umt_lastThemeAlt^:Ss^umt_lastTheme^;
!!en;

!!FU&(theme)=^^:E;

; Get theme cached config, if any
!!VR(themeKey:z):S^umt_theme_%(theme)^;
!!SN:W(themeKey)/?(themeConfig:y);
!!FU&(themeConfig)=(NULL):E;

; Update theme config
!!FU(UnpackUnion):P(themeConfig)/ ?(playlistPos:y)/10/ ?(themeVersion:y)/10/ ?(themePlaybackTime:y)/12;
!!VR(themePlaybackTime):+1 F0/(BITS_12_MASK);
!!FU(PackUnion):P(playlistPos)/10/ (themeVersion)/10/ (themePlaybackTime)/12/ ?(themeConfig:y);
!!SN:W(themeKey)/(themeConfig);

!?FU(umt_ClearAllPlaylists);
; Erases playlists for all themes.
!!VR(themes:y):Si^utm_themes^;
!!SN:M(themes)/?(numThemes:y);

!!re i/0/(numThemes)/1/-1:;
  !!SN:V(themes)/i/?(themeName:z);
  !!VR(themePlaylistKey:z):S^umt_playlist_%(themeName)^;
  !!SN:W(themePlaylistKey)/?(themePlaylist:y);
  !!SN:M(themePlaylist) W(themePlaylistKey)/(NULL);
!!en:;

!!SN:M(themes)/0;

!?FU(umt_ShuffleAllPlaylists);
!!VR(themes:y):Si^utm_themes^;
!!SN:M(themes)/?(numThemes:y);

!!re i/0/(numThemes)/1/-1:;
  !!SN:V(themes)/i/?(themeName:z);
  !!VR(themePlaylistKey:z):S^umt_playlist_%(themeName)^;
  !!SN:W(themePlaylistKey)/?(themePlaylist:y);
  !!SN:M(themePlaylist)/?(playlistSize:y);
  !!co&(playlistSize)<=0:;

  !!FU(Array_Shuffle):P(themePlaylist);
!!en:;

!?FU(umt_FileNameToThemeName);
; Convers file name into extensionless and suffixless lower case theme name.
!#VA(fileNamePtr:x); File name
!#VA(result:x);

!!VR(emptyStr:z):S^^;
!!VR(result):S(@emptyStr);

!!FU(StrToLower):P(fileNamePtr)/?(fileName:z);
!!VR(fileName):M4/?(strLen:y);
!!FU&(strLen)<=(UMT_MIN_TRACK_FILENAME_LEN):E;

!!FU(Substr):P(fileName)/-(UMT_FILE_EXTENSION_LEN)/(INT_MAX)/?(fileExt:z);
!!FU&(fileExt)<>^.mp3^:E;

!!SN:B(fileName)/?(fileNameAddr:y);
!!VRi:S(strLen) -1 -(UMT_FILE_EXTENSION_LEN);

!!re i/i/0/-1:;
  !!VR(charAddr:y):S(fileNameAddr) +i;
  !!UN:C(charAddr)/(UNC_UINT8)/?(charCode:y);
  !!br|(charCode)<(ORD_0)/(charCode)>(ORD_9):;
!!en:;

!!VR(resultLen:y):Si +1;
!!FU&(resultLen)<=0:E;

!!FU(Substr):P(fileName)/0/(resultLen)/?(fileName);
!!VR(result):Z(fileName);

!?FU(umt_ScanDir);
; Adds all files from specified directory to corresponding playlists.
!#VA(dirPathPtr:x);     Path to directory to scan files in.
!#VA(itemsPrefixPtr:x); Prefix to prepend to scanned file names.

!!FU(NewStrArray):P?(fileList:y);
!!FU(ScanDir):P(dirPathPtr)/(fileList)/(SCAN_FILES_ONLY);
!!SN:M(fileList)/?(numFiles:y);
!!FU&(numFiles)<=0:E;

!!VR(themes:y):Si^utm_themes^;

!!re i/0/(numFiles)/1/-1:;
  !!SN:V(fileList)/i/?(fileName:z);
  !!FU(umt_FileNameToThemeName):P(fileName)/?(themeName:z);
  !!co&(themeName)=^^:;

  !!FU(Substr):P(fileName)/0/-(UMT_FILE_EXTENSION_LEN)/?(fileNameWithoutExt:z);
  !!VR(themePlaylistKey:z):S^umt_playlist_%(themeName)^;
  !!SN:W(themePlaylistKey)/?(themePlaylist:y);
  
  ; New theme found, register it in the themes list and create new playlist
  !!if&(themePlaylist)=(NULL):;
    !!SN:M(M_AUTO_ID)/0/(M_STR)/(M_STORED)/?(themePlaylist) W(themePlaylistKey)/(themePlaylist);
    !!SN:M(themes)/d1 V(themes)/-1/(themeName);
  !!en;
  
  !!SN:M(themePlaylist)/d1 V(themePlaylist)/-1/^%z(itemsPrefixPtr)%(fileNameWithoutExt)^;
!!en:;

!?FU(umt_DeepScanDir);
; Scans directory and its first level subdirectories, adding all found mp3 files to corresponding playlists.
!#VA(dirPathPtr:x); Path to directory to scan files in.

!!FU(umt_ScanDir):P(dirPathPtr)/^^;
!!FU(NewStrArray):P?(dirList:y);
!!FU(ScanDir):P(dirPathPtr)/(dirList)/(SCAN_DIRS_ONLY);
!!SN:M(dirList)/?(dirListSize:y);

!!re i/0/(dirListSize)/1/-1:;
  !!SN:V(dirList)/i/?(dirName:z);
  !!FU(umt_ScanDir):P^%z(dirPathPtr)/%(dirName)^/^%(dirName)/^;
!!en:;

!?FU(umt_ForceThemeUpdate);
; Makes theme to update next time by force
!#VA(themePtr:x);

!!VR(themeKey:z):S^umt_theme_%z(themePtr)^;
!!SN:W(themeKey)/?(themeConfig:y);
!!FU&(themeConfig)=(NULL):E;

!!FU(UnpackUnion):P(themeConfig)/ ?(playlistPos:y)/10/ ?(themeVersion:y)/10/ ?(themePlaybackTime:y)/12;

!!VR(themeVersion):S0;
!!VR(themePlaybackTime):S(BIT_12) -1;

!!FU(PackUnion):P(playlistPos)/10/ (themeVersion)/10/ (themePlaybackTime)/12/ ?(themeConfig:y);
!!SN:W(themeKey)/(themeConfig);

!?FU(umt_GetThemeFileName);
!#VA(themePtr:x); Original lower case file name without mp3 extension.
!#VA(result:x);   Final file name without mp3 extension.

; Get theme playlist
!!VR(themePlaylistKey:z):S^umt_playlist_%z(themePtr)^;
!!SN:W(themePlaylistKey)/?(themePlaylist:y);

; Returns theme name without changing if no playlist exists for it
!!if&(themePlaylist)=(NULL):;
  !!VR(result):S(themePtr);
  !!FU:E;
!!en;

; Get playlist size and last item index
!!SN:M(themePlaylist)/?(themePlaylistSize:y);
!!VR(maxPlaylistPos:y):S(themePlaylistSize) -1;

; Get theme cached config, if any
!!VR(themeKey:z):S^umt_theme_%z(themePtr)^;
!!SN:W(themeKey)/?(themeConfig:y) W(themeKey)/?(prevProcessGuid:z);
!!FU(UnpackUnion):P(themeConfig)/ ?(playlistPos:y)/10/ ?(themeVersion:y)/10/ ?(themePlaybackTime:y)/12;

; Ensure, that playlist position if valid
!!VR(playlistPos):F(UMT_MIN_PLAYLIST_POS)/(maxPlaylistPos);

; Handle playlists with at least 2 items
!!if&(maxPlaylistPos)<>(UMT_MIN_PLAYLIST_POS):;
  !!VR(processWasRestarted:y):S(FALSE);
  !!VR(processWasRestarted)&(prevProcessGuid)<>s^umt_processGuid^:S(TRUE);

  ; If it's theme initialization
  !!if|(processWasRestarted)=(TRUE)/(themeConfig)=(NULL):;
    !!if&i^umt_playThemeTracksSequently^<>(FALSE):;
      !!VR(playlistPos):S(UMT_MIN_PLAYLIST_POS);
    !!el:;
      !!VR(playlistPos):T0/(UMT_MIN_PLAYLIST_POS)/(maxPlaylistPos);
    !!en;
  ; Otherwise if it's theme update
  !!el&(themeVersion)<>i^umt_randomizationId^/(themePlaybackTime)>=i^umt_minTrackPlaybackTime^:;
    !!VR(prevPlaylistPos:y):S(playlistPos);

    !!if&i^umt_playThemeTracksSequently^<>(FALSE):;
      !!VR(playlistPos):+1 %(themePlaylistSize);
      !!FU(Array_Shuffle)&(playlistPos)=(UMT_MIN_PLAYLIST_POS):P(themePlaylist);
    !!el:;
      ; Generate random alternative track index, excluding the current one
      !!VRt:S(maxPlaylistPos) -1;
      !!VR(playlistPos):T0/(UMT_MIN_PLAYLIST_POS)/t;
      !!VR(playlistPos)&(playlistPos)=(prevPlaylistPos):S(maxPlaylistPos);
    !!en; el

    ; If it's new track, reset its playback time
    !!VR(themePlaybackTime)&(playlistPos)<>(prevPlaylistPos):S0;
  !!en; el
!!en; if

; Remember new theme version
!!VR(themeVersion):Si^umt_randomizationId^;

; Update theme config
!!FU(PackUnion):P(playlistPos)/10/ (themeVersion)/10/ (themePlaybackTime)/12/ ?(themeConfig:y);
!!SN:W(themeKey)/(themeConfig) W(themeKey)/s^umt_processGuid^;;

!!SN:V(themePlaylist)/(playlistPos)/?(trackName:z);
!!VR(result):Z(trackName);