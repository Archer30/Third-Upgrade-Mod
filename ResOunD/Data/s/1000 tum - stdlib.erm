ZVSE2
; Author:   Archer30
; Engine:   ERM 2.0+
; Requires: ERA 3.0+, Era Erm Framework

; Standard library for Third Upgrade Mod


****************************
**** Set Up WoG Options ****
****************************

!#UN:P0/1;                              [ENABLE Level 8 dwellings function as normal]
!#UN:P37/0;                             [DISABLE Rebalanced Creatures]
!#UN:P50/0;                             [DISABLE Enhanced Monsters]
!#UN:P67/0;                             [DISABLE Neutral Town]
!#UN:P125/0;                            [DISABLE Upg level 7 become level 8]
!#UN:P137/1;                            [ENABLE Level 8 dwellings]
!#UN:P173/0;                            [DISABLE Extended Upgrades]
!#UN:P174/0;                            [DISABLE Universal Upgrades]
!#UN:P188/0;                            [Disable Rampart Farie Dragon]
!#UN:P281/0;                            [DISABLE buckler of Beelzebub]
!#UN:P820/0;                            [DISABLE Adittional Uprades]

*********************************
**** Set up Global Variables ****
*********************************

!?FU(tum_SetUpGlobalVars);
!!VRi^Typhon_Third_Upgrade_Mod_Active^:S(TRUE); [Global var for TUM Enabled]
!!FU(tum_CheckRandMap):P?i^tum_isRandMap^;
!!UN:P195/?i^tum_replaceObj_on^;

!#FU(tum_SetUpGlobalVars):P;

;  Set up global variable for whether Emerald is enabled. Note: Using On Start Or Load is not allowed as it is too late!
!?FU(OnAfterErmInstructions);
!!SN:L^emerald3_3.era^/?(emer3:y);
!!SN:L^emerald3_3.dll^/?(emer3Var:y);
!!SN:L^emerald_v202a.era^/?(emer2:y);

!!VRi^tum_emerald_on^|(emer3)<>0/(emer3Var)<>0/(emer2)<>0:S(TRUE);

!?FU(OnAfterLoadGame);
!!SN:L^emerald3_3.era^/?(emer3:y);
!!SN:L^emerald3_3.dll^/?(emer3Var:y);
!!SN:L^emerald_v202a.era^/?(emer2:y);

!!VRi^tum_emerald_on^|(emer3)<>0/(emer3Var)<>0/(emer2)<>0:S(TRUE);

; Set up town screen variable (to prevent triggering several events)
!?FU(OnOpenTownScreen);
!!VRi^tum_onTownScreen^:S(TRUE);

!?FU(OnCloseTownScreen);
!!VRi^tum_onTownScreen^:S(FALSE);

; Set up varible for whether key A is pressed
!?FU(OnKeyPressed)&i^key^=(KEY_A);
!!VRi^key_a^:S(TRUE);

!?FU(OnKeyReleased)&i^key^=(KEY_A);
!!VRi^key_a^:S(FALSE);

; Generate Emerald AI report
!?FU(OnAfterErmInstructions);
!!SN:L^emerald3_3.era^/?(emerald:y);

!!if&(emerald)<>0;
  !!SN:A(emerald)/^art_AI_report^/?(aiReport:y);
  !!SN:E(aiReport)/1;
!!en;

************************************
**** WoG Option Compatibilities ****
************************************
; Disable the generation of Howling Hollow - must be executed sooner than 78 wog - wogify
!?FU(OnAfterErmInstructions);
!!VRi^wog78_howlingHollow_on^:S(FALSE);

*****************************
**** Replace map objects ****
*****************************

!?FU(OnAfterErmInstructions)&i^tum_replaceObj_on^;
; deleting the sound in the delete object function
; because it causes a crash
!!UN:C4893167/2/?(patch:y);
!!UN:C4893167/2/24555;
; get size of the map
!!UN:X?(mapSize:y)/?(hasUnderground:y); 
; pass once through all cells of the map
!!re l/0/(hasUnderground)/1;  coord z
  !!re k/0/(mapSize)/1/-1;    coord y
    !!re i/0/(mapSize)/1/-1;  coord x
      !!OBi/k/l:T?(objType:y) U?(objSubtype:y);
      !!TRi/k/l:E?(isYellowSquare:y) P?(isPassable:y); 
      !!VR(isYellowSquare):X1;  reverse param isYellowSquare
      !!FU(tum_OnIterateAllMapObjects):Pi/k/l/(objType)/(objSubtype)/(isYellowSquare)/(isPassable);
    !!en;
  !!en;
!!en;
; restoring the source code of the sound
; in the delete objects function
!!UN:C4893167/2/(patch);

************************************************
**** Disable unused artifacts from the game ****
************************************************
; All the blank artifacts would be disabled if ACM is not presented
!?FU(tum_DisableUnusedArtifacts)&i^Advanced_Classes_Mod_Active^=(FALSE);
!!re i/(ART_BLANK_HELMET)/(ART_BLANK_HORN);
  !!UN:Ai/1;
!!en;

!#FU(tum_DisableUnusedArtifacts):P;

*******************************************************
**** Function to get the latest creature ID of TUM ****
*******************************************************
; For Amethyst 2 by Majaczek only
!?FU(GetMaxMonsterId);
!#VA(result:x);

!!SN:L^amethyst2_4.dll^/?(amet:y);

!!if&(amet)<>0;
  !!UN:C5509220/(UNC_INT)/?(result);
  !!VR(result):-1;
!!el;
  !!VR(result):S(MON_LAST_WOG);
!!en;

*******************************************************
**** Function to get the latest artifact ID of TUM ****
*******************************************************
; For Emerald 3 by Majaczek only
!?FU(GetMaxArtifactId);
!#VA(result:x);

!!if&i^tum_emerald_on^;
  !!re i/(ART_LAST_WOG)/999;
    ; get the first character of the name of the artifact
    !!SN:H^art^/i/0/?z1;
    !!UN:C9597928/1/?(firstChar:y);

    ; end the loop if the first character is #
    !!br&(firstChar)=35;
  !!en;

  !!VR(result):Si -1;
!!el;
  !!VR(result):S(ART_LAST_WOG);
!!en;

****************************************************
**** Function to check if WoG Sctipts is loaded ****
****************************************************

!?FU(tum_CheckWoGScripts);
!#VA(result:x);

!!VR(result):S(FALSE);
!!UN:J8/1/^wog scripts.pac^;            [check and export result to 1]
!!VR(result)&1:S(TRUE);

*********************************************************
**** Function to check whether a map is a random map ****
*********************************************************

!?FU(tum_CheckRandMap);
!#VA(result:x);

!!VR(result):S(FALSE);
!!UN:C6919480/4/?(value:y);
!!VR(add:y):S(value) +128980;
!!UN:C(add)/1/?(value2:y);               [(value2)=114 -> random map]
!!VR(result)&(value2)=114:S(TRUE);

*******************************************************************
**** Function to gernerate a random Heroes 3 / WoG artifact ID ****
*******************************************************************
; Used when emerald 3 is disabled
!?FU(tum_GetRandH3WoGArt);
!#VA(artClass:x) (art:x);

!!UN:J6/(artClass)/?(art);

!!VR(flag:y):S(TRUE);
!!VR(flag)&(art)<=(ART_FIRST_AID_TENT):S(FALSE); [warmachines and spells]
!!VR(flag)&(art)>=(ART_ANGELIC_ALLIANCE)/(art)<=(ART_CORNUCOPIA):S(FALSE); [combi]
!!VR(flag)&(art)>=(ART_HIGHLIGHTED_SLOT)/(art)<=(ART_ARTIFACT_LOCK):S(FALSE); [unused]
!!VR(flag)&(art)>=(ART_BLANK_HELMET)/(art)<=(ART_LAST_WOG):S(FALSE); [unused]

!!FU(tum_GetRandH3WoGArt)&(flag)=(FALSE):P(artClass)/?(art);

*********************************************************
**** Function to play a custom animation by Hawaiing ****
*********************************************************

!?FU(tum_PlayCustomAnimation);
!#VA(animPtr:x);                        [Filename of the animation]
!#VA(pos:x);                            [Position of the animation]
!#VA(delay:x);                          [Optional. Delay (ms)]
!#VA(flags:x);                          [Optional. Flags. 0-4.]
!#VA(isTransparent:x);                  [Optional. Transparent (boolean)]
!#VA(flagAlterationOn:x);               [Optional. Allow changes to flags (boolean)]

; Set up values
!!VR(bmvIndex:y):S82;                   [Poof]
!!VRz1:Sz(animPtr);

!!FU:A?(numArgs:y);

!!if&(numArgs)<6;
  !!VR(flagAlterationOn):S0;
  !!VR(isTransparent):S(FALSE);
  !!VR(flags):S0;
!!en;

!!VR(delay)|(delay)<0/(numArgs)<3:S100;

!!VR(pos)|(pos)<0/(pos)>187:S93;        [Play the animation in the middle of the battlefield if posisiton is invalid]
!!VR(flags):F0/4;
!!VR(isTransparent):F(FALSE)/(TRUE);

!!UN:C6919200/4/?(value:y);             [战场内存]
!!VR(defAdd:y):S(value) +78568;         [动画DEF]
!!VR(indexAdd:y):S(value) +78572;       [动画索引]
!!UN:C4454270/4/?(basicAdd:y);          [BM:V调用动画时用到的基址]
!!UN:C(defAdd)/4/0 C(indexAdd)/4/-1;    [清除内存多余数据]
!!VR(origDefPtr:y):S(bmvIndex) *12 +(basicAdd); [魔法动画名字的指针地址]
!!VR(origFlagsPtr:y):S(origDefPtr) +8;  [魔法动画播放标志的内存(这里可由x5和x6组成)]
!!VR(zPtr:y):S512 +9597416;             [z1变量对应的内存地址(ERA下)]
!!VR(newFlags:y):S(isTransparent) *256 +(flags); [自定义播放标志(否则采用x1动画的原有标志)]
!!UN:C(origDefPtr)/4/?(origNamePtr:y);  [原动画名指针]
!!UN:C(origFlagsPtr)/4/?(origFlags:y);  [原有播放标志]
!!UN:C(origDefPtr)/4/(zPtr);            [新指针]
!!UN&(flagAlterationOn)<>(FALSE):C(origFlagsPtr)/4/(newFlags); [自定义播放标志]
!!SN:E4810128/2/(value)/(bmvIndex)/(pos)/(delay)/0; [调用内部函数播放战场动画]
!!UN:C(origDefPtr)/4/(origNamePtr);     [还原]
!!UN&(flagAlterationOn)<>(FALSE):C(origFlagsPtr)/4/(origFlags); [还原]
!!UN:C(defAdd)/4/0 C(indexAdd)/4/-1;    [清除内存多余数据]
